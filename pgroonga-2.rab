= PGroonga 2

: subtitle
   Make PostgreSQL rich full text search system backend!
: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   PGConf.ASIA 2017
: date
   2017-12-05
: start-time
   2017-12-05T16:20:00+09:00
: end-time
   2017-12-05T17:00:00+09:00
: theme
   .

= Targets\n(('note:対象者'))

  * Want to implement full text search with PostgreSQL\n
    (('note:PostgreSQLで全文検索したい'))
  * Not good at full text search\n
    (('note:全文検索はよく知らない'))
  * PGroonga 1.0.0 users\n
    (('note:PGroonga 1.0.0は使ったことがある'))

= Abbreviations\n(('note:略語'))

  * PG: PostgreSQL\n
    (('note:ポスグレ: PostgreSQL'))
  * FTS: Full text search\n
    (('note:FTS: 全文検索'))

= FTS system: Targets\n(('note:全文検索システム：対象'))

(('tag:center'))
(('tag:large'))
(('tag:margin-bottom * 2'))
Many tests\n
(('note:大量のテキスト'))

  * e.g.: Text data in office docs in file servers\n
    (('note:例：ファイルサーバー内のオフィス文書内のテキスト'))
  * e.g.: Item descriptions, chat logs and so on\n
    (('note:例：商品説明やチャットログなど'))

= FTS system: Goal\n(('note:全文検索システム：目的'))

Provide\n
needed info\n
when you need\n
(('note:必要な情報を必要なときに提供すること'))

= Provide needed info\n(('note:必要な情報を提供'))

  * 😞 Not found\n
    (('note:探している情報が見つからない'))
  * 😃 Found\n
    (('note:探している情報が見つかる'))
  * 😆 Found ((*unconscious needed*)) info too!\n
    (('note:意識していなかったけど実は欲しかった情報も見つかる！'))

= When you need\n(('note:必要なときに活用'))

  * 😞 Need many time to find\n
    (('note:なかなか見つからない'))
  * 😃 Find in no time\n
    (('note:すぐに見つかる'))
  * 😆 Already found\n
    (('note:すでに見つかっていた'))
    * e.g.: Recommendation\n
      (('note:例：レコメンデーション'))

= How to impl.: Options\n(('note:実装方法：選択肢'))

  * Use FTS server\n
    (('note:全文検索サーバーを使う'))
  * Use PostgreSQL\n
    (('note:PostgreSQLを使う'))

= FTS server: Pros\n(('note:全文検索サーバー案：メリット'))

  * Provides all basic features\n
    (('note:必要な機能が揃っている'))
  * Provides advanced features\n
    (('note:＋αの機能もある'))
  * Fast\n
    (('note:速い'))

= FTS server: Cons1\n(('note:全文検索サーバー案：デメリット1'))

  * Large implementation cost\n
    (('note:実装コスト大'))
    * Learn how to use from scratch\n
      (('note:使い方を1から学ぶ必要がある'))
    * How to impl. data sync?\n
      (('note:マスターデータの同期はどうする？'))

= FTS server: Cons2\n(('note:全文検索サーバー案：デメリット2'))

  * Large maintenance cost\n
    (('note:メンテナンスコスト大'))
    * Learn how to operate from scratch\n
      (('note:運用方法を1から学ぶ必要がある'))

= PostgreSQL: Pros1\n(('note:PostgreSQL案：メリット1'))

  * Less implementation cost\n
    (('note:実装コスト小'))
    * Less things to be learned\n
      (('note:新しく覚えることが少ない'))
    * Can manage data at the same place\n
      (('note:データの一元管理'))

= PostgreSQL: Pros2\n(('note:PostgreSQL案：メリット2'))

  * Less operation cost\n
    (('note:メンテナンスコスト小'))
    * The current operation knowledge is reusable\n
      (('note:既存の運用ノウハウを使える'))

= PostgreSQL: Cons\n(('note:PostgreSQL案：デメリット'))

  * Built-in features aren't enough\n
    (('note:組込機能では機能不足'))
  * SQL limits efficiency\n
    (('note:SQLの表現力不足'))
    * e.g.: SQL needs multiple queries for a process that can be done by 1 query by FTS server\n
      (('note:例：全文検索サーバーなら1クエリーで実現できる処理にSQLだと複数クエリー必要なことがある'))

= The 3rd option\n(('note:第3の選択肢'))

  * Use FTS engine via PostgreSQL (SQL)\n
    (('note:PostgreSQL経由（SQL）で全文検索エンジンを使う'))

= Pros(('note:メリット'))

  * Fast and rich features\n
    (('note:高速で豊富な機能'))
  * Less implementation cost\n
    (('note:実装コスト小'))
  * Less operation cost\n
    (('note:メンテナンスコスト小'))

= Cons\n(('note:デメリット'))

  * Need PostgreSQL extension\n
    (('note:PostgreSQLに拡張機能が必要'))
    * Not available on DBaaS\n
      (('note:DBaaSで使えない'))

= Option: No FTS knowledge\n(('note:オススメの選択肢：全文検索の知識ナシ'))

  * Need only simple features\n
    (('note:まだ単純な機能で十分'))
    * Less data: LIKE with PostgreSQL\n
      (('note:データ少：PostgreSQLでLIKE'))
  * Need up-to-date FTS features\n
    (('note:いまどきの全文検索機能が必要'))
    * FTS engine via PostgreSQL\n
      (('note:PostgreSQL経由で全文検索エンジン'))

= Option: With FTS knowledge\n(('note:オススメの選択肢：全文検索の知識アリ'))

  * Need tuned FTS feature\n
    (('note:カリカリにチューニングしたい'))
    * PostgreSQL + FTS server\n
      (('note:PostgreSQL＋全文検索サーバー'))
  * Others\n
    (('note:それ以外'))
    * FTS engine via PostgreSQL\n
      (('note:PostgreSQL経由で全文検索エンジン'))

= Option to be described\n(('note:説明する選択肢'))

FTS engine via\n
PostgreSQL\n
(('note:ostgreSQL経由で全文検索エンジン'))

= FTS engine: Groonga\n(('note:全文検索エンジン：Groonga（ぐるんが）'))

  * Embeddable FTS engine\n
    (('note:組込可能な全文検索エンジン'))
    * PGroonga: Groonga in PostgreSQL\n
      (('note:PGroonga：PostgreSQLに組込'))
  * Usable as FTS server\n
    (('note:全文検索サーバーとして単独でも使用可能'))
    * PostgreSQL + FTS server architecture is also available\n
      (('note:PostgreSQL＋全文検索サーバー構成もできる'))

= Groonga's hobby: data update\n(('note:Groongaの得意な事：データの追加・更新'))

  * Make fresh data searchable!\n
    (('note:新鮮な情報をすぐ検索可能！'))
    * Batch update is needless\n
      (('note:バッチで更新しなくてもよい'))
    * Can use as chat backend\n
      (('note:チャットくらいの頻度でもOK'))\n
      e.g.: Zulip uses PGroonga\n
      (('note:例：ZulipはPGroongaを採用'))

= Groonga's hobby: data update\n(('note:Groongaの得意な事：データの追加・更新'))

  * Keep search performance while updating!\n
    (('note:更新中も検索性能が落ちない！'))
    * Updatable when there are many search users\n
      (('note:利用ユーザーが多い時でも更新可能'))

= PGroonga\n(('note:PGroonga（ぴーじーるんが）'))

  * PostgreSQL index\n
    (('note:PostgreSQLのインデックス'))
    * Alternative of GIN\n
      (('note:B-tree・GINなどと同じレイヤー'))
  * Usage\n
    (('note:使用方法'))
    * (({CREATE INDEX ...}))\n
      (({USING PGroonga ...}))

= PostgreSQL and FTS\n(('note:PostgreSQLと全文検索'))

  * LIKE: Built-in(('note:（組込機能）'))
  * textsearch: Built-in(('note:（組込機能）'))
  * pg_trgm: Contrib(('note:（標準添付）'))
    * Bundled in the archive\n
      (('note:アーカイブには含まれている'))
    * Need to install separately\n
      (('note:別途インストールすれば使える'))

= LIKE and performance\n(('note:LIKEと速度'))

  * Small data\n
    (('note:少ないデータ'))
    * Enough performance\n
      (('note:十分実用的'))
    * 400 chars X 0.2M recs: < 1sec\n
      (('note:400文字×20万件くらいなら1秒とか'))
  * Not small data\n
    (('note:少なくないデータ'))
    * Need to tune\n
      (('note:性能問題アリ'))

= LIKE and FTS system\n(('note:LIKEと全文検索システム'))

👍Enough performance\n
in most case\n
(('note:速度が実用的なことも多い'))

  * Data are small in many case\n
    (('note:少ないデータなら'))

= LIKE and FTS system\n(('note:LIKEと全文検索システム'))

👎Unable to sort\n
(('note:それっぽい順のソート不可'))

  * Sort is important in FTS\n
    (('note:全文検索ではソート順が重要'))
  * Users checks only\n
    the first N entries\n
    (('note:ユーザーは先頭N件しか見ない'))

= textsearch

  * 👍Fast search by index\n
    (('note:インデックスを作るので速い'))
  * Need module for each lang\n
    (('note:言語毎にモジュールが必要'))
    * 👍Modules for English, French, ... are built-in\n
      (('note:英語やフランス語などは組込'))
    * 👎Modules for languages in Asia aren't maintained\n
      (('note:アジア圏の言語用のモジュールはメンテされていない'))

= pg_trgm

  * 👍Fast search by index\n
    (('note:インデックスを作るので速い'))
  * 👎Asian languages aren't enough supported\n
    (('note:アジア圏の言語のサポートは十分ではない'))
  * 👎Unable to sort\n
    (('note:それっぽい順のソート不可'))

= PGroonga

  * 👍Fast search by index\n
    (('note:インデックスを作るので速い'))
  * 👍Sortable\n
    (('note:それっぽい順のソート可'))
  * 👍Support all languages\n
    (('note:全言語対応'))
  * 👎Need to install separately\n
    (('note:別途インストールする必要アリ'))

= FTS system with PostgreSQL\n(('note:PostgreSQLで全文検索システム'))

  * PGroonga is the best!💯\n
    (('note:PGroongaがベスト！'))
  * PGroonga
    * Fast(('note:（高速）'))
    * Support all langs(('note:（全言語対応）'))
    * Sortable(('note:（それっぽい順でソート可）'))

= FTS system: Basic features\n(('note:全文検索システム：基本機能'))

  * Fast FTS + sort\n
    (('note:高速全文検索＋ソート'))
  * Show texts around keyword\n
    (('note:キーワード周辺テキスト表示'))
  * Highlight keyword\n
    (('note:検索キーワードハイライト'))

= FTS system: Adv. features\n(('note:全文検索システム：高度な機能'))

  * Auto complete\n
    (('note:オートコンプリート'))
  * Similar search\n
    (('note:類似文書検索'))
  * Synonym expansion\n
    (('note:同義語展開'))

= PGroonga 1.0.0

(('tag:center'))
↓ are only supported\n
(('note:以下の機能のみ対応'))

  * Fast FTS + sort\n
    (('note:高速全文検索＋ソート'))
  * Show texts around keyword\n
    (('note:キーワード周辺テキスト表示'))

= PGroonga 2

All features are supported!\n
(('note:全機能対応！'))

= PGroonga 1.0.0 → 2

  * 😆 Many new features\n
    (('note:たくさんの新機能'))
  * 😆 Improve performance\n
    (('note:性能改善'))
  * 😞 API is changed\n
    (('note:APIが変わった'))

= API change\n(('note:API変更'))

(('tag:center'))
Operator is changed\n
(('note:演算子変更'))

  @@ → &@~
  %% → &@
  ...

= API change\n(('note:API変更'))

(('tag:center'))
(({pgroonga})) schema is deprecated\n
(('note:pgroongaスキーマを非推奨に'))

  pgroonga.score → pgroonga_score
  pgroonga.flush → pgroonga_flush
  ...

= App for PGroonga 1.0.0\n(('note:PGroonga 1.0.0用アプリ'))

  * Broken with PGroonga 2?\n
    (('note:PGroonga 2では動かない？'))
    * No! Work without any changes!\n
      (('note:何も変更しなくても動くよ！'))

(('tag:center'))
Great! But why?\n
(('note:いいじゃん！でもなんで動くの？'))\n
↓\n
"Painless upgrade" technique

= Painless upgrade

  * PGroonga 2 provides\n
    both 1 API and 2 API\n
    (('note:PGroonag 2は1用のAPIも2用のAPIも両方提供'))
    * Can use PGroonga 2 with 1 API\n
      (('note:PGroonga 1のAPIでPGroonag 2を使える'))

= Painless upgrade

  * PGroonga 2 keeps 1 API\n
    (('note:PGroonga 2の間は1のAPIを維持'))
  * PGroonga 3 will drop 1 API\n
    (('note:PGroonga 3で1のAPIを削除予定'))
    * Just need to upgrade API until 3\n
      (('note:PGroonga 3までにAPIをアップグレードすればよい'))

= Painless upgrade

  * App for PGroonga 1.0.0 doesn't work with PGroonga 2\n
    (('note:PGroonga 1.0.0用のアプリがPGroonga 2で動かない'))
    * It's a bug. Please report it!\n
      (('note:バグなので報告してね！'))

= FTS system: Basic features\n(('note:全文検索システム：基本機能'))

  * Fast FTS + sort\n
    (('note:高速全文検索＋ソート'))
  * Show texts around keyword\n
    (('note:キーワード周辺テキスト表示'))
  * Highlight keyword\n
    (('note:検索キーワードハイライト'))

= Fast FTS + sort\n(('note:高速全文検索＋ソート'))

  # image
  # src = images/php-document-search-search.png
  # relative_height = 100

= Table definition

  # coderay sql

  CREATE TABLE entries (
    -- Need primary key
    -- It's needed for sort
    id integer PRIMARY KEY,
    title text,
    content text
  );

= Index definition

  # coderay sql

  -- For FTS.
  -- The default is good enough!
  CREATE INDEX entries_full_text_search
    ON entries
    -- "USING PGroonga" is important!
    -- Primary key is for sort!
    USING PGroonga (id, title, content);

= Insert data

  # coderay sql

  -- Normal INSERT.
  INSERT INTO entries
    VALUES (1,
            'Fast FTS with Groonga!',
            'Fast FTS is needed!');

= FTS

  # coderay sql

  SELECT title FROM entries
    WHERE
  -- &@~ is for FTS
  -- AND search with "search" and "fast"
      title &@~ 'search fast' OR
      content &@~ 'search fast';

= FTS: LIKE

  # coderay sql

  SELECT title FROM entries
    WHERE
  -- Index search for LIKE is supported
  -- = Improve app perf without any changes
  -- NOTE: &@~ is faster than LIKE
      title LIKE '%search%' OR
      content LIKE '%search%';

= Sort

  # coderay sql

  SELECT
      title,
      -- pgroonga_score(TABLE_NAME) returns
      -- precision as number
      pgroonga_score(entries) AS score
    FROM entries
    WHERE -- ...
    -- Sort by precision
    ORDER BY score DESC LIMIT 10;

= Highlight keyword\n(('note:キーワードハイライト'))

  # image
  # src = images/php-document-search-search.png
  # relative_height = 100

= Hightlight for HTML

  # coderay sql

  SELECT
    pgroonga_highlight_html(
      title,
      -- Extract keywords from query
      pgroonga_query_extract_keywords('search fast'))
    FROM entries
    WHERE title &@~ 'search fast' OR
          content &@~ 'search fast';

= Highlight for HTML: Example

  # coderay html

  Fast search with <Groonga>!
  ↓
  <span class="keyword">Fast</span>
  ↑↓ Keywords are marked up with "class"
  <span class="keyword">search</span>！
  with &lt;Groonga&gt;! ← Escape tag

= Texts around keyword\n(('note:キーワード周辺テキスト'))

  # image
  # src = images/php-document-search-search.png
  # relative_height = 100

= Texts around keyword for HTML

  # coderay sql

  SELECT
    pgroonga_snippet_html(
      content,
      -- Extract keywords from query
      pgroonga_query_extract_keywords('search fast'))
    FROM entries
    WHERE title &@~ 'search fast' OR
          content &@~ 'search fast';

= Example

  # coderay html

  ...fast search with <Groonga>!...
  ↓
  ARRAY[
    ↓ First
    '<span class="keyword">fast</span>
    ↑↓ Keywords are marked up with "class"
    <span class="keyword">search/span>！
    with &lt;Groonga&gt;!', ← Escape tag
    '...' ← Second
  ]

= FTS system: Adv. features\n(('note:全文検索システム：高度な機能'))

  * Auto complete\n
    (('note:オートコンプリート'))
  * Similar search\n
    (('note:類似文書検索'))
  * Synonym expansion\n
    (('note:同義語展開'))

= Auto complete\n(('note:オートコンプリート'))

  # image
  # src = images/php-document-search.png
  # relative_height = 100

= Auto complete: Preparation\n(('note:オートコンプリート：準備'))

  * Master table\n
    (('note:マスターテーブル'))
    * Candidate\n
      (('note:候補：（例：牛乳）'))
    * Readings in Katakana\n
      (Only for Japanese)\n
      (('note:ヨミ（日本語の場合。カタカナ。複数登録可。）'))
      * (('note:例：ギュウニュウ・ミルク'))

= Auto complete: Implementation\n(('note:オートコンプリート：実装方法'))

  * OR search with ...
    * Prefix search against readings\n
      (Only for Japanese)\n
      (('note:ヨミを前方一致検索（日本語の場合。）'))
    * Loose FTS against candidate\n
      (('note:候補を緩く全文検索'))
  * Sort by candidate\n
    (('note:候補でソート'))

(('tag:xx-small'))
((<"https://pgroonga.github.io/how-to/auto-complete.html"|URL:https://pgroonga.github.io/how-to/auto-complete.html>))

= Table definition

  # coderay sql

  CREATE TABLE terms (
    -- Candidate
    term text,
    -- Readings
    readings text[],
  );

= Data example

  # coderay sql

  INSERT INTO terms VALUES (
    'milk', -- Candidate
    ARRAY[
     -- Reading in Katakana
     'ギュウニュウ', -- "milk" in Japanese
     -- Multiple readings
     'ミルク'        -- "milk" in Katakana
    ]
  );

= Data management\n(('note:データ管理'))

  * Easy to maintain because it's a normal table\n
    (('note:普通のテーブルなので管理が楽'))
    * Easy to insert/delete/update\n
      (('note:追加・削除・更新が楽'))
    * Normal backup and replication\n
      (('note:ダンプ・リストアもレプリケーションもいつも通り'))

= Index for prefix search\n(('note:前方一致用インデックス'))

  # coderay sql

  CREATE INDEX prefix_search ON terms
    USING PGroonga
    -- ...text_array_term_search...
    (readings pgroonga_text_array_term_search_ops_v2);

= Index for loose FTS\n(('note:緩い全文検索用インデックス'))

  # coderay sql

  CREATE INDEX loose_search ON terms
    USING PGroonga (term)
    -- Tokenizer for loose full text search
    WITH (tokenizer='TokenBigramSplitSymbolAlphaDigit');

= How to search\n(('note:検索方法'))

  # coderay sql

  SELECT term FROM terms
  -- Prefix search against readings
    WHERE readings &^~ '${INPUT}' OR
  -- Loose full text search
          term &@ '${INPUT}'
    ORDER BY term LIMIT 10; -- Sort

= Search example: Candidate\n(('note:検索例：候補'))

  # coderay sql

  -- User inputs "il"
  SELECT term FROM terms
  -- Prefix search against readings
    WHERE readings &^~ 'il' OR
  -- Loose full text search (Hit)
          term &@ 'li'
    ORDER BY term LIMIT 10; -- Sort

= Search example: Katakana\n(('note:検索例：カタカナ'))

  # coderay sql

  -- User inputs "ギュウ"
  SELECT term FROM terms
  -- Prefix search against readings (Hit)
    WHERE readings &^~ 'ギュウ' OR
  -- Loose full text search (Hit)
          term &@ 'ギュウ'
    ORDER BY term LIMIT 10; -- Sort

= Search example: Hiragana\n(('note:検索例：ひらがな'))

  # coderay sql

  -- User inputs "ぎゅう"
  SELECT term FROM terms
  -- Prefix search against readings (Hit)
    WHERE readings &^~ 'ぎゅう' OR
  -- Loose full text search
          term &@ 'ぎゅう'
    ORDER BY term LIMIT 10; -- Sort

= Search example: Romaji\n(('note:検索例：ローマ字'))

  # coderay sql

  -- User inputs "gyu"
  SELECT term FROM terms
  -- Prefix search against readings (Hit)
    WHERE readings &^~ 'gyu' OR
  -- Loose full text search
          term &@ 'gyu'
    ORDER BY term LIMIT 10; -- Sort

= Synonym expansion\n(('note:同義語展開'))

  * Synonym\n
    (('note:同義語'))
    * Same mean but different notation\n
      (('note:同じ意味だが表記が異なる語'))
    * e.g.: "PostgreSQL" and "PG"\n
      (('note:例：「PostgreSQL」と「ポスグレ」'))

= Synonym expansion\n(('note:同義語展開'))

  * Users don't want to care\n
    (('note:ユーザーは気にしたくない'))
  * Synonym expansion\n
    (('note:同義語展開'))
    * OR search with all synonyms\n
      (('note:同義語すべてでOR検索'))

= Implementation\n(('note:実装方法'))

  * Create synonym table\n
    (('note:同義語管理テーブルを作成'))
  * Expand synonyms in query\n
    (('note:クエリー内の同義語を展開'))
  * Search by expanded query\n
    (('note:展開後のクエリーで検索'))

(('tag:xx-small'))
((<"https://pgroonga.github.io/reference/functions/pgroonga-query-expand.html"|URL:https://pgroonga.github.io/reference/functions/pgroonga-query-expand.html>))

= Table definition

  # coderay sql
  CREATE TABLE synonyms (
    -- Term to be expanded
    term text,
    -- Synonym list.
    -- Including the "term" itself.
    -- If you don't input the "term",
    -- the "term" is unsearchable term.
    terms text[]
  );

= Data example

  # coderay sql
  INSERT INTO synonyms
    VALUES ('PostgreSQL', -- Expand "PostgreSQL"
            ARRAY['PostgreSQL', 'PG']),
           ('PG', -- Expand "PG"
            ARRAY['PG', 'PostgreSQL']);

= Data management\n(('note:データ管理'))

  * Easy to maintain because it's a normal table\n
    (('note:普通のテーブルなので管理が楽'))
    * Easy to insert/delete/update\n
      (('note:追加・削除・更新が楽'))
    * Normal backup and replication\n
      (('note:ダンプ・リストアもレプリケーションもいつも通り'))

= Index definition

  # coderay sql
  CREATE INDEX synonym_search ON synonyms
    USING PGroonga
    -- ...text_term_search...
    -- For equal search
    (term pgroonga_text_term_search_ops_v2);

= Confirm\n(('note:確認方法'))

  # coderay sql

  SELECT pgroonga_query_expand(
    'synonyms', -- Table name
    'term', -- Column name to be expanded
    'terms', -- Column name for synonyms
    'PostgreSQL' -- Query
  );
  -- '((PostgreSQL) OR (PG))'

= Search\n(('note:検索方法'))

  # coderay sql
  SELECT title FROM entries
    WHERE
   -- title &@~ 'DB ((PostgreSQL) OR (PG))'
      title &@~
        pgroonga_query_expand('synonyms',
                              'term',
                              'terms',
                              'DB PostgreSQL');

= Similar search\n(('note:類似文書検索'))

  * Query is document itself\n
    (('note:検索クエリーは文書そのもの'))
    * Not keyword\n
      (('note:キーワードではない'))
  * Use case\n
    (('note:利用例'))
    * Show related entries\n
      (('note:関連エントリーの提示に使える'))

= Implementation\n(('note:実現方法'))

  * Create dedicated index\n
    (('note:類似検索用のインデックスを作る'))
    * Use tokenizer for target language\n
      (('note:対象の言語に合わせた処理で精度向上'))
    * e.g.: MeCab based tokenizer for Japanese\n
      (('note:例：日本語ならMeCabベースのトークナイザーを活用'))
  * Use dedicated operator\n
    (('note:類似検索用の演算子を使う'))

= Index definition

  # coderay sql

  CREATE INDEX entries_similar_search
    ON entries
    -- Target: Both title and content
    -- Reason: Title is important
    USING PGroonga (id, (title || ' ' || content))
    -- TokenMecab is good for Japanese
    WITH (tokenizer='TokenMecab');

= Search

  # coderay sql

  SELECT title,
      pgroonga_score(entries) AS score
    FROM entries
    WHERE
      -- &@* is operator for similar search.
      -- Search with existing document.
      (title || ' ' || content) &@*
        '...fast search with Groonga!...'
    ORDER BY score DESC LIMIT 3;

= Result example\n(('note:結果例'))

  Query:
     ...search with Groonga!...

  Hit example:
     ...search with PGroonga!...

= Wrap up: Basic features\n(('note:全文検索システム：基本機能'))

  * Fast FTS + sort\n
    (('note:高速全文検索＋ソート'))
  * Show texts around keyword\n
    (('note:キーワード周辺テキスト表示'))
  * Highlight keyword\n
    (('note:検索キーワードハイライト'))

= Wrap up: Adv. features\n(('note:全文検索システム：高度な機能'))

  * Auto complete\n
    (('note:オートコンプリート'))
  * Similar search\n
    (('note:類似文書検索'))
  * Synonym expansion\n
    (('note:同義語展開'))

= 全文検索システムの実装\n次の一歩

  * 構造化データ対応
    * オフィス文書・HTMLなど
  * 対応に必要な処理
    * テキスト抽出
    * メタデータ抽出(('note:（例：タイトル・更新日時）'))
    * スクリーンショット作成(('note:（なおよい）'))

= 抽出ツール

  * Apache Tika
    * Apache Luceneのサブプロジェクト
    * 対応フォーマット数が多い
  * ChupaText
    * Groongaのサブプロジェクト
    * スクリーンショット作成対応

= ChupaText

  * 対応フォーマット
    * Word/Excel/PowerPoint
    * ODT/ODS/ODP(('note:（OpenDocument）'))
    * PDF/HTML/XML/CSV/...
  * インターフェイス
    * HTTPとコマンドライン

= ChupaText：インストール

  * DockerかVagrantを使うのが楽
    * (('tag:xx-small'))
      ((<"https://github.com/ranguba/chupa-text-docker"|URL:https://github.com/ranguba/chupa-text-docker>))
    * (('tag:xx-small'))
      ((<"https://github.com/ranguba/chupa-text-vagrant"|URL:https://github.com/ranguba/chupa-text-vagrant>))

= ChupaText：Docker

  # coderay console
  % GITHUB=https://github.com
  % git clone \
     ${GITHUB}/ranguba/chupa-text-docker.git
  % cd chupa-text-docker
  % docker-compose up --build

= ChupaText：使い方

  # coderay console
  % curl \
      --form data=@XXX.pdf \
      http://localhost:20080/extraction.json

= ChupaText：結果例

  # coderay json

  {
    "mime-type": "application/pdf", # 元データのMIMEタイプ
    "size": 147159, # メタデータ
    ...,
    "texts": [ # 抽出されたテキスト（N個）
      {
        "mime-type": "text/plain", # 抽出後のMIMEタイプ
        ...,
        "creator": "Adobe Illustrator CS3", # メタデータ
        "body": "This is sample PDF. ...", # 抽出したテキスト
        "screenshot": {
          "mime-type": "image/png", # スクリーンショットのMIMEタイプ
          "data": "iVBORw...", # Base64にした画像データ
          "encoding": "base64" # Base64であることを明記
        }
      }
    ]
  }

= ChupaText：Web UI

  # image
  # src = images/chupa-text-web-ui-form.png
  # relative_height = 100

= ChupaText：Web UI抽出例

  # image
  # src = images/chupa-text-web-ui-extract-metadata.png
  # relative_height = 100

= ChupaText：Web UI抽出例

  # image
  # src = images/chupa-text-web-ui-extract-text-and-screenshot.png
  # relative_height = 100

= ChupaText：Vagrant

  # coderay console
  % GITHUB=https://github.com
  % git clone \
     ${GITHUB}/ranguba/chupa-text-vagrant.git
  % cd chupa-text-vagrant
  % vagrant up

(('tag:center'))
使い方はDocker版と同じ

= ChupaText：活用例

  * 抽出したテキスト
    * PGroongaへ挿入
  * 抽出したメタデータ
    * PGroongaへ挿入
    * 絞り込みに活用
  * 作成したスクリーンショット
    * 検索結果表示時に掲載

= まとめ

  * PostgreSQL経由で\n
    全文検索エンジン
    * 採用の判断材料を提供
  * 全文検索システム実装例を紹介
    * PGroonga
  * 構造化データの対応方法を紹介
    * ChupaText

= 扱わなかった話題

  * 運用について
    * 障害対策・レプリケーション
    * ロジカルレプリケーションは\n
      対応済み！(('note:（少しだけ設定方法を紹介）'))
  * チューニング
  * Groongaの機能を直接使う方法

= ロジカルレプリケーション\npostgresql.conf

  # coderay conf
  # マスター
  wal_level = logical
  max_wal_senders = 10
  max_replication_slots = 10

= ロジカルレプリケーション\nDB作成・PGroongaインストール

  # coderay sql
  -- マスター
  CREATE DATABASE test_master;
  \c test_master
  CREATE EXTENSION pgroonga;

= ロジカルレプリケーション\nテーブル作成

  # coderay sql
  -- マスター
  CREATE TABLE memos (
    id integer PRIMARY KEY,
    content text
  );
  CREATE INDEX
    full_text_search_index ON memos
    USING pgroonga (id, content);

= ロジカルレプリケーション\nレプリケーション用ユーザー作成

  # coderay sql
  -- マスター
  -- pg_hba.confも編集すること
  CREATE ROLE replica
    WITH REPLICATION
      LOGIN PASSWORD 'pass';
  GRANT SELECT
    ON ALL TABLES IN SCHEMA public
    TO replica;

= ロジカルレプリケーション\npublication作成

  # coderay sql
  -- マスター
  CREATE PUBLICATION pub
    FOR TABLE memos;

= ロジカルレプリケーション\nDB作成・PGroongaインストール

  # coderay sql
  -- スレーブ
  CREATE DATABASE test_slave;
  \c test_slave
  CREATE EXTENSION pgroonga;

= ロジカルレプリケーション\nテーブル作成

  # coderay sql
  -- スレーブ
  CREATE TABLE memos (
    id integer PRIMARY KEY,
    content text
  );
  CREATE INDEX
    full_text_search_index ON memos
    USING pgroonga (id, content);

= ロジカルレプリケーション\nsubscription作成

  # coderay sql
  -- スレーブ
  CREATE SUBSCRIPTION sub
    CONNECTION
      'host=192.168.0.18 port=5432
       user=replica password=pass
       dbname=test_master'
    PUBLICATION pub;

= ロジカルレプリケーション\n確認

  # coderay sql
  -- マスター
  INSERT INTO memos VALUES (1, '全文検索');
  -- スレーブ
  SELECT * FROM memos
    WHERE content &@~ '全文検索';
  --  id | content  
  -- ----+----------
  --   1 | 全文検索
  -- (1 row)

= サポートサービス紹介

  * 導入支援(('note:（設計支援・性能検証・移行支援・…）'))
  * 開発支援\n
    (('note:（サンプルコード提供・問い合わせ対応・…）'))
  * 運用支援(('note:（障害対応・チューニング支援・…）'))

問い合わせ先：

(('tag:x-small'))
((<"https://www.clear-code.com/contact/?type=groonga"|URL:https://www.clear-code.com/contact/?type=groonga>))
